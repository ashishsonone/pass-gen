#!/bin/bash

#  Copyright 2018 Daniel Long Sockwell <daniel@codesections.com>.  
#  All rights reserved.  This file is licensed under the GPLv3+.
#  Please see COPYING for more information.


#  Default settings (unless overridden by command-line options or .passgenrc)
WORDLIST=/usr/local/lib/pass-gen/wordlists/EFF_wordlist_total
SIZE_OF_WORDLIST="not set"
CHARLIST=/usr/local/lib/pass-gen/character-lists/default_character_list
SIZE_OF_CHARLIST="not set"
PADDING_LENGTH_BEFORE=0
PADDING_LENGTH_AFTER=3
NUMBER_OF_WORDS=6
CAPITAL_COUNTER="$(( $(od -An -N2 -i /dev/urandom) % (2) ))" #randomly 1 or 2
CAPITALIZATION_MODE="both"
CAPITALIZATION_OPTIONS_PER_WORD=3
DISPLAY_PASSWORD=false
REPORT_ENTROPY=false


#  If a configuration file exists, read values from it
if [ -f /home/$USER/.passgenrc ]; then
  echo "Reading preset values from ~/.passgenrc"
  CONFIG_FILE="/home/$USER/.passgenrc"
  ## Find the `current_project` key, and get the quoted string value 
  if [ $(grep word-list $CONFIG_FILE) ]; then
    WORDLIST=$(grep word-list $CONFIG_FILE | cut --delimiter== --fields=2)
    WORDLIST=$(echo $WORDLIST | sed -e "s_~_/home/${USER}_")
  fi
  
  if [ $(grep character-list $CONFIG_FILE) ]; then
    CHARLIST=$(grep character-list $CONFIG_FILE | cut --delimiter== --fields=2)
    CHARLIST=$(echo $CHARLIST | sed -e "s_~_/home/${USER}_")
  fi

  if [ $(grep capital-mode $CONFIG_FILE) ]; then
    PADDING_LENGTH_BEFORE=$(grep capital-mode $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep padding-before $CONFIG_FILE) ]; then
    PADDING_LENGTH_BEFORE=$(grep padding-before $CONFIG_FILE | cut --delimiter== --fields=2)
  fi
  
  if [ $(grep padding-after $CONFIG_FILE) ]; then
    PADDING_LENGTH_AFTER=$(grep padding-after $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep length $CONFIG_FILE) ]; then
    NUMBER_OF_WORDS=$(grep length $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep echo-password $CONFIG_FILE) ]; then
    DISPLAY_PASSWORD=true
  fi

  if [ $(grep report-entropy $CONFIG_FILE) ]; then
    REPORT_ENTROPY=true
  fi

fi


##
## OPTION COMMANDS
##

cmd_version() {
  >&2 cat <<-_EOF
pass-gen v.0.4.0
Copyright (C) 2018 Daniel Long Sockwell, www.codesections.com
License GPLv3+: GNU GPL version 3, https://gnu.org/licenses/gpl.html.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Daniel Long Sockwell
	_EOF
  exit 0
}


cmd_help() {
  >&2 cat <<-_EOF
Usage: pass-gen [OPTION]

Generates a secure, random passphrase based on the options supplied.
By default, the passphrase is copied to the xclip clipboard,  not displayed

Options:
  -l <NUMBER>, --length <NUMBER>   use NUMBER words to generate the passphrase
  --padding-before <NUMBER>        preceed passphrase with NUMBER random numbers
  --padding-after <NUMBER>         follow passphrase with NUMBER random numbers
  --capital-mode all|initial|both  set the capitalization mode for words
  -e [N], --echo-password [N]      displays N passphrases, or one if N not set
  --word-list <PATH>               use wordlist found at PATH
  --special-character-list <PATH>  use special character list found at PATH
  -r, --report-entropy             report the search space for generated password
  -v, -V, --version                display version information and exit
  -h, --help                       display this help message and exit

Full documentation avalible in the pass-gen(1) man page.
	_EOF
  exit 0
}

cmd_error() {
    >&2 cat <<-_EOF
  pass-gen: unrecognized option '$1'
  Try 'pass-gen --help' for more information.
	_EOF
    exit 1
}

cmd_echo() {
  DISPLAY_PASSWORD=true 
  case $1 in
    ''|*[!0-9]*)             NUMBER_TO_DISPLAY=1; return 1;;
    *)                       NUMBER_TO_DISPLAY=$1;;
  esac
}

cmd_length() {
  case $1 in
    ''|*[!0-9]*)             >&2 cat <<-_EOF 
  "$1" is not a valid length.  
  Please provide an integer number of words for the passphrase.
	_EOF
   exit 1;;
    *)                       NUMBER_OF_WORDS=$1;;
   esac
}

cmd_wordlist() {
  if [ ! -f $1 ]; then
    echo "Wordlist file could not be found.  Does it exist?"
    exit 1
  elif [ ! -r $1 ]; then
    echo "Wordlist file could not be opened.  Please ensure you have read permission."
    exit 1
  else
    WORDLIST=$1
  fi
}

cmd_charlist() {
  if [ ! -f $1 ]; then
    echo "Character-list file could not be found.  Does it exist?"
    exit 1
  elif [ ! -r $1 ]; then
    echo "Character-list file could not be opened.  Please ensure you have read permission."
    exit 1
  else
    CHARLIST=$1
  fi
}

cmd_padding_length_before() {
  case $1 in
    ''|*[!0-9]*)             >&2 cat <<-_EOF 
  "$1" is not a valid amount of padding.
  Please provide a numerical value.
	_EOF
   exit 1;;
    *)                       PADDING_LENGTH_BEFORE=$1;;
   esac
}

cmd_padding_length_after() {
  case $1 in
    ''|*[!0-9]*)             >&2 cat <<-_EOF 
  "$1" is not a valid amount of padding.
  Please provide a numerical value.
	_EOF
   exit 1;;
    *)                       PADDING_LENGTH_AFTER=$1;;
   esac
}

cmd_capital_mode() {
  case $1 in
    all|initial|both)         CAPITALIZATION_MODE=$1;;
    *)                        >&2 cat <<-_EOF 
  "$1" is not a valid capitalization mode.
  Please set the mode to 'all', 'initial', or 'both'.
	_EOF
   exit 1;;
   esac
   if [[ CAPITALIZATION_MODE!=both ]]; then
     CAPITALIZATION_OPTIONS_PER_WORD=2
   fi
}

cmd_report_entrophy() { 
  REPORT_ENTROPY=true
}

#  Pick a random symbol from CHARLIST
generate_random_symbol() {
  MIN=1
  SIZE_OF_CHARLIST=$(cat $CHARLIST | wc -l)
  #  Generate a random number between MAX and MIN
  RANDOM_NUM="$(( $MIN + $(od -An -N2 -i /dev/urandom) % ($SIZE_OF_CHARLIST - $MIN + 1) ))"
  RANDOM_CHAR="$(sed -n ${RANDOM_NUM}p $CHARLIST)"
}


#  Generate a random word from WORDLIST
generate_random_word() {
  MIN=1
  SIZE_OF_WORDLIST=$(cat $WORDLIST | wc -l)
  #  Generate a random number between MAX and MIN
  RANDOM_NUM="$(( $MIN + $(od -An -N2 -i /dev/urandom) % ($SIZE_OF_CHARLIST - $MIN + 1) ))"

  RANDOM_WORD="$(sed -n ${RANDOM_NUM}p $WORDLIST)"
}


#  Capitalize the word if necessary
capitalize_all() {
  if [ $(( ($CAPITAL_COUNTER - 1) % 2 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | tr '[:lower:]' '[:upper:]')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}

capitalize_initial() {
  if [ $(( $CAPITAL_COUNTER % 2 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | sed 's/./\U&/')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}

capitalize_both() {
  if [ $(( ($CAPITAL_COUNTER - 1) % 3 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | tr '[:lower:]' '[:upper:]')"
  fi
  if [ $(( $CAPITAL_COUNTER % 3 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | sed 's/./\U&/')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}


#  Generate random numbers to pad the passphrase
generate_padding() {
  for i in $(seq 1 $PADDING_LENGTH_AFTER); do
    RANDOM_NUM="$(( 0 + $(od -An -N2 -i /dev/urandom) % (9 - 0 + 1) ))"
    PADDING_AFTER=${PADDING_AFTER}${RANDOM_NUM}
  done
  for i in $(seq 1 $PADDING_LENGTH_BEFORE); do
    RANDOM_NUM="$(( 0 + $(od -An -N2 -i /dev/urandom) % (9 - 0 + 1) ))"
    PADDING_BEFORE=${PADDING_BEFORE}${RANDOM_NUM}
  done
}

#  Generate passphrase by combining random words with the chosen character
generate_passphrase() {
  generate_random_symbol
  for i in $(seq 1 $NUMBER_OF_WORDS); do
    generate_random_word
    if [ "$CAPITALIZATION_MODE" = "both" ]; then
      capitalize_both
    elif [ "$CAPITALIZATION_MODE" = "initial" ]; then
      capitalize_initial
    elif [ "$CAPITALIZATION_MODE" = "all" ]; then
      capitalize_all
    fi
    
  if [ $i -eq $NUMBER_OF_WORDS ]; then
    RANDOM_PASS="${RANDOM_PASS}${RANDOM_WORD}"
  else
    RANDOM_PASS="${RANDOM_PASS}${RANDOM_WORD}${RANDOM_CHAR}"
  fi
  done
  generate_padding
  RANDOM_PASS=${PADDING_BEFORE}${RANDOM_PASS}${PADDING_AFTER}
}

clear_passphrase() {
  RANDOM_PASS=""
  PADDING_BEFORE=""
  PADDING_AFTER=""
}


#  Process command-line options and update settings as required
if [[ "$1" ]]; then     
  while [[ "$1" ]]; do
    currentParamater=$1
    case "$1" in 
      -l | --length) shift;                  cmd_length "$@"; shift ;;
      --word-list) shift;                    cmd_wordlist "$@"; shift ;;
      --special-character-list) shift;       cmd_charlist "$@"; shift ;;
      --padding-before) shift;               cmd_padding_length_before "$@"; shift ;;
      --padding-after) shift;                cmd_padding_length_after "$@"; shift ;;
      --capital-mode) shift;                 cmd_capital_mode "$@"; shift ;;
      -e | --echo-password) shift;           cmd_echo "$@";
                                             if [[ $? == 0 ]]; then 
                                               shift
                                             fi ;;
      -v | -V | --version) shift;            cmd_version ;;
      -r | --report-entropy) shift;          cmd_report_entrophy;;
      -h | --help) shift;                    cmd_help ;;
      *)                                     cmd_error "$@" ;;
    esac
  done
fi
generate_passphrase
echo -n "$RANDOM_PASS" | xclip -selection "clipboard"
>&2 echo "Generated passphrase copied to clipboard.  Will clear in 45 seconds."
clear_passphrase
( sleep 45 ; echo -n "" | xclip -selection "clipboard" ) &

if [ "$DISPLAY_PASSWORD" = true ]; then
  for i in $(seq 0 $NUMBER_TO_DISPLAY); do
    echo $RANDOM_PASS
    clear_passphrase
    generate_passphrase
  done
fi

if [[ "$REPORT_ENTROPY" = true ]]; then
  bold=$(tput bold)
  normal=$(tput sgr0)

  TOTAL_SEARCH_SPACE=`echo "($(($SIZE_OF_WORDLIST*$CAPITALIZATION_OPTIONS_PER_WORD))^$NUMBER_OF_WORDS) * $SIZE_OF_CHARLIST * $((10**$PADDING_LENGTH_BEFORE)) * $((10**$PADDING_LENGTH_AFTER))" | bc -l`
  ENTROPY=`echo "scale=2; l($TOTAL_SEARCH_SPACE)/l(2)" | bc -l`
  >&2 cat <<-_EOF
  
${bold}Password Statistics:$normal
Number of words on wordlist:		$SIZE_OF_WORDLIST
Capitalization options per word:	$CAPITALIZATION_OPTIONS_PER_WORD
Effective size of wordlist:		$(($SIZE_OF_WORDLIST * $CAPITALIZATION_OPTIONS_PER_WORD))
Number of random words used:		$NUMBER_OF_WORDS
Symbols on the character list:		$SIZE_OF_CHARLIST
Possibilities for padding before:	$((10**$PADDING_LENGTH_BEFORE))
Possibilities for padding after:	$((10**$PADDING_LENGTH_AFTER))
Formula for search space:	$(($SIZE_OF_WORDLIST*$CAPITALIZATION_OPTIONS_PER_WORD))^$NUMBER_OF_WORDS * $SIZE_OF_CHARLIST * $((10**$PADDING_LENGTH_BEFORE)) * $((10**$PADDING_LENGTH_AFTER))
========================================================
Search space:		$TOTAL_SEARCH_SPACE
Total entropy of passphrase:${bold}	 	$ENTROPY bits${normal}
  
For comparison purposes, know that passwords generated
by the EFF Dice password tool contain 77 bits of entropy
	_EOF
fi

RANDOM_PASS="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
WORDLIST="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
CHARLIST="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_WORD="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_CHAR="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_NUM="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
