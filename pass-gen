#!/bin/bash

#  Copyright 2018 Daniel Long Sockwell <daniel@codesections.com>.  
#  All rights reserved.  This file is licensed under the GPLv3+.
#  Please see COPYING for more information.


#  Default settings (unless overridden by command-line options or .passgenrc)
WORDLIST=/usr/local/lib/pass-gen/wordlists/EFF_wordlist_total
CHARLIST=/usr/local/lib/pass-gen/character-lists/conservative_character_list
PADDING_LENGTH_BEFORE=0
PADDING_LENGTH_AFTER=3
NUMBER_OF_WORDS=6
CAPITAL_COUNTER="$(( $(od -An -N2 -i /dev/urandom) % (2) ))" #randomly 1 or 2
CAPITALIZATION_MODE="both"
DISPLAY_PASSWORD=false
#  CONFIG_FILE=~/.passgenrc

cmd_version() {
  cat <<-_EOF
pass-gen v.0.0.1
Copyright (C) 2018 Daniel Long Sockwell, www.codesections.com
License GPLv3+: GNU GPL version 3, https://gnu.org/licenses/gpl.html.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Daniel Long Sockwell
	_EOF
  exit 0
}


cmd_help() {
  cat <<-_EOF
Usage: pass-gen [OPTION]

Generates a secure, random passphrase based on the options supplied.
By default, the passphrase is copied to the xclip clipboard,  not displayed

Options:
  -l <NUMBER>, --length <NUMBER>   use NUMBER words to generate the passphrase
  --padding-before <NUMBER>        preceed passphrase with NUMBER random numbers
  --padding-after <NUMBER>         follow passphrase with NUMBER random numbers
  --capital-mode all|initial|both  set the capitalization mode for words
  -e, --echo-password              display the passphrase in the terminal
  --word-list <PATH>               use wordlist found at PATH
  --special-character-list <PATH>  use special character list found at PATH
  -v, -V, --version                display version information and exit
  -h, --help                       display this help message and exit

Full documentation avalible in the pass-gen(1) man page.
	_EOF
  exit 0
}

cmd_error() {
    cat <<-_EOF
  pass-gen: unrecognized option '$1'
  Try 'pass-gen --help' for more information.
	_EOF
    exit 1
}


#  If a configuration file exists, read values from it
if [ -f /home/$USER/.passgenrc ]; then
  echo "Reading preset values from ~/.passgenrc"
  CONFIG_FILE="/home/$USER/.passgenrc"
  ## Find the `current_project` key, and get the quoted string value 
  if [ $(grep word-list $CONFIG_FILE) ]; then
    WORDLIST=$(grep word-list $CONFIG_FILE | cut --delimiter== --fields=2)
    WORDLIST=$(echo $WORDLIST | sed -e "s_~_/home/${USER}_")
  fi
  
  if [ $(grep character-list $CONFIG_FILE) ]; then
    CHARLIST=$(grep character-list $CONFIG_FILE | cut --delimiter== --fields=2)
    CHARLIST=$(echo $CHARLIST | sed -e "s_~_/home/${USER}_")
  fi

  if [ $(grep capital-mode $CONFIG_FILE) ]; then
    PADDING_LENGTH_BEFORE=$(grep capital-mode $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep padding-before $CONFIG_FILE) ]; then
    PADDING_LENGTH_BEFORE=$(grep padding-before $CONFIG_FILE | cut --delimiter== --fields=2)
  fi
  
  if [ $(grep padding-after $CONFIG_FILE) ]; then
    PADDING_LENGTH_AFTER=$(grep padding-after $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep length $CONFIG_FILE) ]; then
    NUMBER_OF_WORDS=$(grep length $CONFIG_FILE | cut --delimiter== --fields=2)
  fi

  if [ $(grep echo-password $CONFIG_FILE) ]; then
    DISPLAY_PASSWORD=true
  fi
fi


#  Process command-line options and update settings as required
if [[ "$1" ]]; then     
  while [[ "$1" ]]; do
    currentParamater=$1
    case "$1" in 
      -l | --length) shift;                  NUMBER_OF_WORDS=$1; shift ;;
      --word-list) shift;                    WORDLIST=$1; shift ;;
      --special-character-list) shift;       CHARLIST=$1; shift ;;
      --padding-before) shift;               PADDING_LENGTH_BEFORE=$1; shift ;;
      --padding-after) shift;                PADDING_LENGTH_AFTER=$1; shift ;;
      --capital-mode) shift;                 CAPITALIZATION_MODE=$1; shift ;;
      -e | --echo-password) shift;           DISPLAY_PASSWORD=true ;;
      -v | -V | --version) shift;            cmd_version ;;
      -h | --help) shift;                    cmd_help ;;
      *)                                     cmd_error "$@" ;;
    esac
  done
fi


#  Pick a random symbol from CHARLIST
generate_random_symbol() {
  MIN=1
  MAX=$(cat $CHARLIST | wc -l)
  #  Generate a random number between MAX and MIN
  RANDOM_NUM="$(( $MIN + $(od -An -N2 -i /dev/urandom) % ($MAX - $MIN + 1) ))"
  RANDOM_CHAR="$(sed -n ${RANDOM_NUM}p $CHARLIST)"
}


#  Generate a random word from WORDLIST
generate_random_word() {
  MIN=1
  MAX=$(cat $WORDLIST | wc -l)
  #  Generate a random number between MAX and MIN
  RANDOM_NUM="$(( $MIN + $(od -An -N2 -i /dev/urandom) % ($MAX - $MIN + 1) ))"

  RANDOM_WORD="$(sed -n ${RANDOM_NUM}p $WORDLIST)"
}


#  Capitalize the word if necessary
capitalize_all() {
  if [ $(( ($CAPITAL_COUNTER - 1) % 2 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | tr '[:lower:]' '[:upper:]')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}

capitalize_initial() {
  if [ $(( $CAPITAL_COUNTER % 2 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | sed 's/./\U&/')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}

capitalize_both() {
  if [ $(( ($CAPITAL_COUNTER - 1) % 3 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | tr '[:lower:]' '[:upper:]')"
  fi
  if [ $(( $CAPITAL_COUNTER % 3 )) -eq "0" ]; then
    RANDOM_WORD="$(echo $RANDOM_WORD | sed 's/./\U&/')"
  fi
  CAPITAL_COUNTER=$(( $CAPITAL_COUNTER + 1 ))
}


#  Generate random numbers to pad the passphrase
generate_padding() {
  for i in $(seq 1 $PADDING_LENGTH_AFTER); do
    RANDOM_NUM="$(( 0 + $(od -An -N2 -i /dev/urandom) % (9 - 0 + 1) ))"
    PADDING_AFTER=${PADDING_AFTER}${RANDOM_NUM}
  done
  for i in $(seq 1 $PADDING_LENGTH_BEFORE); do
    RANDOM_NUM="$(( 0 + $(od -An -N2 -i /dev/urandom) % (9 - 0 + 1) ))"
    PADDING_BEFORE=${PADDING_BEFORE}${RANDOM_NUM}
  done
}

#  Generate passphrase by combining random words with the chosen character
generate_random_symbol
for i in $(seq 1 $NUMBER_OF_WORDS); do
  generate_random_word
  if [ "$CAPITALIZATION_MODE" = "both" ]; then
    capitalize_both
  elif [ "$CAPITALIZATION_MODE" = "initial" ]; then
    capitalize_initial
  elif [ "$CAPITALIZATION_MODE" = "all" ]; then
    capitalize_all
  fi
  
  RANDOM_PASS="${RANDOM_PASS}${RANDOM_WORD}${RANDOM_CHAR}"
done
generate_padding
RANDOM_PASS=${PADDING_BEFORE}${RANDOM_PASS}${PADDING_AFTER}


echo -n "$RANDOM_PASS" | xclip -selection "clipboard"
>&2 echo "Generated passphrase copied to clipboard.  Will clear in 45 seconds."

( sleep 45 ; echo -n "" | xclip -selection "clipboard" ) &

if [ "$DISPLAY_PASSWORD" = true ]; then
  echo $RANDOM_PASS
fi

RANDOM_PASS="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
WORDLIST="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
CHARLIST="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_WORD="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_CHAR="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
RANDOM_NUM="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
