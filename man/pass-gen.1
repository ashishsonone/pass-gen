.TH PASS-GEN 1 "2018 June 5" CodeSections "pass-gen"

.SH NAME
pass-gen - generates a secure, pronounceable passphrase

.SH SYNOPSIS
.B pass-gen
[ 
.I OPTIONS
]

.SH DESCRIPTION

.B pass-gen
is a simple, highly configurable passphrase generator that creates secure, pronounceable passphrases for use on their own or, ideally, with a password manager such as KeePassXC or pass.

The format for generated passwords is:
  [user-selected number of numbers]
                +
  [user-selected number of words, followed by special character]
                +
  [user-selected number of numbers]

The first word will randomly either be all capitals or all lowercase, and words after the first will alternate case.

By default, \fBpass-gen\fP uses 0 numbers before the words, 6 words, and 3 numbers after the words.  These default settings result in a passphrase with a minimum entropy of 93 bits for an attacker who has full knowledge of the pass-gen configuration and dictionary file used.  For an attacker without that knowledge, the average entropy of the generated password is approximately 532 bits.

With default settings, the following password could be generated:
  DOORKNOB^postbox^OUTSHOOT^clever^STATUS^backfield^796

.SH OPTIONS

.TP
\fB-l \fP\fInumber\fP |\fB  --length\fP \fInumber\fP
Use \fInumber\fP words when generating the passphrase.  The words will be randomly selected from the wordlist file.  Increase this value for more secure passphrases; decrease it for more useable but less secure.  Default value: 6.
.TP
\fB--padding-before\fP \fInumber\fP
Insert \fInumber\fP numbers before the words that comprise the passphrase.  Default value: 0.
.TP
\fB--padding-after\fP \fInumber\fP
Insert \fInumber\fP numbers after the words that comprise the passphrase.  Default value: 3.
.TP
\fB-e | --echo-password\fP
Echos the generated password to standard output (thus typically displaying it to the command line) in addition to copying it to the clipboard.  By default, the password is not displayed, just copied, which prevents it from being inadvertently seen by others.
.TP
\fB--word-list\fP \fIpath/to/wordlist/file\fP
Uses a wordlist file found at \fIpath/to/wordlist/file\fP.  A wordlist is a simple file of words, one per line.  The passphrase will be constructed by randomly selecting words from the wordlist file.  Multiple wordlist files are included in pass-gen/wordlists; see the \fBwordlists & character lists\fP section, below, for details about the size and providence of the built-in wordlists.  Alternately, you may use your own wordlist, so long as it consists of one word per line.  Default value: pass-gen/wordlist/EEF_wordlist_total.
.TP
\fB--special-character-list \fIpath/to/special-character/file\fP
Uses a character list file found at \fIpath/to/character-list/file\fP.  A character list is a simple file of characters, one per line.  When constructing a passphrase, \fBpass-gen\fP will append a random character after each word to separate the words and render them compound safe.  (The same character is used throughout the passphrase.)  Multiple character list files are included in pass-gen/character-lists; see the \fBwordlists & character lists\fP section, below, for details about the size and providence of the built-in lists.  Alternately, you may use your own list, so long as it consists of one character per line.  Default value: pass-gen/character-lists/conservative_character_list
.TP
\fB-v | -V | --version\fP
Display version information and exit.
.TP
\fB-h | --help\fP
Display short help text and exit. 

.SH EXAMPLES
.TP
basic usage:
.B $ pass-gen 
.br
Generated passphrase copied to clipboard.  Will clear in 45 seconds.
.br
.B $ pass-gen -e
.br
Generated passphrase copied to clipboard.  Will clear in 45 seconds.
.br
OUTTHINK-barman-AFTERMOST-liqueur-LANDLORD-jovial-134
.TP
advanced usage:
.B $ pass-gen --padding-before 2 --padding-after 1 --length 7 -e
.br
Generated passphrase copied to clipboard.  Will clear in 45 seconds.
.br
34OUTBREAK^caucus^PROBLEM^attempt^CARLESS^outsell^CORRECT^8

.TP
Usage with \fBpass\fP, the standard Unix password manager
.B $ pass-gen -e | pass add -e USERNAME
.br
Generated passphrase copied to clipboard.  Will clear in 45 seconds.
.br
[master 8563f73] Add given password for USERNAME to store.
.br
 1 file changed, 0 insertions(+), 0 deletions(-)
.br
 create mode 100644 USERNAME.gpg

.SH WORDLISTS & CHARACTER LISTS
.TP
\fBpass-gen\fP includes multiple wordlists and character lists, in addition to supporting user-developed lists.  Please submit additional lists to daniel@codesections.com for inclusion.  Current wordlists are:

.TP
\fBEEF_wordlist_long\fP                                             7,776 words
.br
A wordlist prepared by the Electronic Freedom Foundation for use in generating passphrases by rolling five dice and picking a random word based on the roll.  The EFF selected words based on research from Ghent University's Center for Reading Research, and prioritized selecting words that are familiar to most English speakers, highly concrete, and not subject to common misspelling.  Currently used by KeePassXC to generate passphrases, with limited customization.  See
.UR https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases
.UE  
for more details.

.TP
\fBEEF_wordlist_short\fP                                            1,296 words
.br
A wordlist prepared by the Electronic Freedom Foundation for use in generating passphrases by rolling four dice and picking a random word based on the roll.  The intention is for the short wordlist to contain fewer, shorter, and more memorable words and to be used to generate passphrases with longer words.  The EFF selected words based on research from Ghent University's Center for Reading Research, and prioritized selecting words that are familiar to most English speakers, highly concrete, and not subject to common misspelling.  See 
.UR https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases
.UE  
for more details.

.TP
\fBEEF_wordlist_short_alt\fP                                        1,296 words
.br
An alternate wordlist prepared by the Electronic Freedom Foundation for use in generating passphrases by rolling four dice and picking a random word based on the roll.  Compared with the other short EEF wordlist, the goal of the alternate wordlist is to facilitate software-based autocompletion of passphrases.  The EFF selected words based on research from Ghent University's Center for Reading Research, and prioritized selecting words that are familiar to most English speakers, highly concrete, and not subject to common misspelling.  See 
.UR https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases
.UE  
for more details.

.TP
\fBEEF_wordlist_total\fP                                            8,429 words
.br
A wordlist created by combining all unique words in the EFF long wordlist, the EFF short wordlist, and the EFF alternate short wordlist.  This is the \fBdefault wordlist\fP.

.TP
\fBDiceware_wordlist\fP                                             7,776 words
The original Diceware wordlist for use generating a password by rolling dice.  Generally thought to be slightly less useable than the EFF wordlists.  See
.UR http://world.std.com/~reinhold/diceware.html
.UE 
for details.

.TP
\fB1Password_wordlist\fP                                           18,325 words
The wordlist used by 1Password to generate its passphrases.  Longer (and thus more secure) than the EEF lists, but considerably less usable due to multiple difficult-to-spell words. 

.TP
\fBBitCoin_wordlist\fP                                              2,048 words
A wordlist developed to allow bitcoin users to recover their coins on any compatible wallet.  Not secure enough to be used on its own (without excessively long passphrases), but potentially useful in combination with other wordlists.

.TP
\fBThe CRR Wordlists\fP
\fBCRR_wordlist_100\fP                                       6,307 words
.br
\fBCRR_wordlist_99\fP                                       14,744 words
.br
\fBCRR_wordlist_98\fP                                       18,537 words
.br
\fBCRR_wordlist_97\fP                                       21,191 words
.br
\fBCRR_wordlist_95\fP                                       25,043 words
.br
\fBCRR_wordlist_94\fP                                       26,598 words
.br
\fBCRR_wordlist_93\fP                                       28,063 words
.br
\fBCRR_wordlist_92\fP                                       29,342 words
.br
\fBCRR_wordlist_91\fP                                       30,498 words
.br
\fBCRR_wordlist_90\fP                                       31,615 words
.br
\fBCRR_wordlist_85\fP                                       36,108 words
.br
\fBCRR_wordlist_80\fP                                       39,765 words
.br
\fBCRR_wordlist_75\fP                                       42,673 words
.br
\fBCRR_wordlist_70\fP                                       45,222 words
.br
\fBCRR_wordlist_60\fP                                       49,183 words
.br
\fBCRR_wordlist_50\fP                                       52,264 words
.br
\fBCRR_wordlist_40\fP                                       54,984 words
.br
\fBCRR_wordlist_30\fP                                       57,360 words
.br
\fBCRR_wordlist_20\fP                                       59,565 words
.br
\fBCRR_wordlist_10\fP                                       61,176 words
.br
\fBCRR_wordlist_full\fP                                     61,855 words
.br
Wordlists developed by the Ghent University Center for Reading Research, and not built for passphrase use.  Each wordlist consists of the words known by at least N percent of the CRR sample; for example, CRR_wordlist_90 contains the 31,615 words that at least 90 percent of the CRR sample was familiar with. 
.UR http://crr.ugent.be/archives/2045
.UE

.TP
\fBhsxkpasswd_wordlist\fP                                           1,259 words
Wordlist used by default in hsxkpasswd, the Perl-based passphrase generator.  
.UR https://www.bartbusschots.ie/s/publications/software/xkpasswd/
.UE

.TP
\fBhsxkpasswd_sample_wordlist\fP                                    8,891 words
An additional English wordlist provided by hsxkpasswd, but not used by default.

.TP
\fBMoby_wordlist_cleaned\fP                                        56,003 words
Wordlist based on Grady Ward's Moby II wordlist.  This wordlist is used by the node-xkcd-password generator.  The version included here has been cleaned of words containing non-alphanumeric characters.


.TP
\fBCHARACTER LISTS\fP
.TP
\fBASCII_symbol_list\fP                                           32 characters
All ASCII printing characters that are non-alphanumeric: ! " # $ % ; ( ) * + ` - . / : ; < = > ? [ \ ] ^ _ { | } ~ @ ,

.TP
\fBOracle_character_list\fP                                       22 characters
Characters approved for use in Oracle passwords: @ % + \ / ' ! # $ ^ ? : , ( ){ } ~ ` - _ .

.TP
\fBconservative_character_list
Special characters selected to be acceptable in the vast majority of password fields: . ! @ $ % ^ & * - _ + = : | ~ ? /
This character list is used by default.


.SH AUTHOR
.B pass-gen
was written by
.MT daniel@codesections.com
Daniel Long Sockwell
.ME .
For updates and more information, please see
.UR https://\:www.codesections.com/pass-gen
.UE .

.SH COPYING
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
